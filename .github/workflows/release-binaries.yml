name: Build Release Binaries

# This workflow builds release binaries for OWASP Noir across multiple platforms
# - Triggers automatically on git tags (v*)
# - Can be manually triggered via workflow_dispatch
# - Builds static binaries for Linux (x86_64, ARM64) and macOS (x86_64, ARM64)
# - Uploads artifacts for each build
# - Automatically uploads to GitHub Releases when triggered by a tag
#
# Ref: https://github.com/mint-lang/mint/blob/master/.github/workflows/build.yml

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Binaries

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: shards install

      - name: Apply http_proxy compatibility fix
        run: |
          cat > lib/http_proxy/src/http/proxy/wait_group.cr << 'EOF'
          class WaitGroup
            def initialize
              @count = 0
              @mutex = Mutex.new
              @channel = Channel(Nil).new
            end
          
            def add(delta : Int32)
              @mutex.synchronize do
                @count += delta
              end
            end
          
            def done
              @mutex.synchronize do
                @count -= 1
                if @count == 0
                  @channel.send(nil)
                end
              end
            end
          
            def wait
              @channel.receive
            end
          end
          EOF
          sed -i 's/require "wait_group"/require ".\/wait_group"/' lib/http_proxy/src/http/proxy/server.cr

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5

      - name: Set architecture environment variable
        run: |
          if [ "$RUNNER_ARCH" == "X64" ]; then
            echo "ARCH=x86_64" >> $GITHUB_ENV
          elif [ "$RUNNER_ARCH" == "ARM64" ]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          else
            echo "ARCH=unknown" >> $GITHUB_ENV
          fi

      - if: matrix.os == 'ubuntu-latest'
        name: Build binary (Linux)
        run: |
          mkdir -p build
          # Use Crystal container to build static binary
          docker run --rm -v $(pwd):/noir -w /noir --entrypoint="" 84codes/crystal:latest-debian-12 sh -c "
            apt-get update && apt-get install -y libyaml-dev ca-certificates git curl &&
            shards install --production &&
            # Apply http_proxy compatibility fix
            cat > lib/http_proxy/src/http/proxy/wait_group.cr << 'EOF'
          class WaitGroup
            def initialize
              @count = 0
              @mutex = Mutex.new
              @channel = Channel(Nil).new
            end
          
            def add(delta : Int32)
              @mutex.synchronize do
                @count += delta
              end
            end
          
            def done
              @mutex.synchronize do
                @count -= 1
                if @count == 0
                  @channel.send(nil)
                end
              end
            end
          
            def wait
              @channel.receive
            end
          end
          EOF
            sed -i 's/require \"wait_group\"/require \".\\/wait_group\"/' lib/http_proxy/src/http/proxy/server.cr &&
            mkdir -p build &&
            /usr/bin/crystal build src/noir.cr -o build/noir-${GITHUB_REF_SLUG}-linux-${ARCH} --release --no-debug --static
          "

      - if: startsWith(matrix.os, 'macos')
        name: Build binary (macOS)
        run: |
          mkdir -p build
          crystal build src/noir.cr \
            -o build/noir-${GITHUB_REF_SLUG}-osx-${ARCH} \
            --no-debug --release

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ env.ARCH }}
          path: build

      - if: startsWith(github.ref, 'refs/tags/')
        name: Upload to GitHub Releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          file: build/*